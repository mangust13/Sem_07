using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace ExerciseService;

class ExerciseService
{
    static async Task Main(string[] args)
    {
        var factory = new ConnectionFactory() { HostName = "localhost" };
        await using var connection = await factory.CreateConnectionAsync();
        await using var channel = await connection.CreateChannelAsync();

        // ===== –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ –∞—É–¥—ñ–æ =====
        await channel.QueueDeclareAsync("exercise.audio", false, false, false, null);

        // ===== –û—Ç—Ä–∏–º—É–≤–∞—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ =====
        await channel.QueueDeclareAsync("speech.result", false, false, false, null);

        var consumer = new AsyncEventingBasicConsumer(channel);
        consumer.ReceivedAsync += async (sender, ea) =>
        {
            var json = Encoding.UTF8.GetString(ea.Body.ToArray());
            var result = JsonSerializer.Deserialize<JsonElement>(json);

            var exerciseId = result.GetProperty("ExerciseId").GetString();
            var accuracy = result.GetProperty("Accuracy").GetDouble();
            var feedback = result.GetProperty("Feedback").GetString();

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"\nüì• –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–ø—Ä–∞–≤–∏ #{exerciseId}");
            Console.ResetColor();
            Console.WriteLine($"‚Üí –¢–æ—á–Ω—ñ—Å—Ç—å: {accuracy:P0}");
            Console.WriteLine($"‚Üí –ö–æ–º–µ–Ω—Ç–∞—Ä: {feedback}");
            await Task.Delay(1000);
            Console.WriteLine($"[ExerciseService] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É ProgressService ‚úÖ");

            // üü° –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("\n–í–≤–µ–¥–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤–ø—Ä–∞–≤–∏ (–∞–±–æ 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É):");
            Console.ResetColor();
        };

        await channel.BasicConsumeAsync("speech.result", autoAck: true, consumer);

        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine("\n–í–≤–µ–¥–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤–ø—Ä–∞–≤–∏ (–∞–±–æ 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É):");
        Console.ResetColor();

        while (true)
        {
            var exerciseId = Console.ReadLine();
            if (exerciseId == "exit") break;

            var message = new
            {
                ExerciseId = exerciseId,
                UserId = 7,
                AudioUrl = $"audio_{exerciseId}.wav",
                Timestamp = DateTime.UtcNow
            };

            var body = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(message));
            var props = new BasicProperties();

            await channel.BasicPublishAsync<BasicProperties>(
                exchange: "",
                routingKey: "exercise.audio",
                mandatory: false,
                basicProperties: props,
                body: body);

            Console.WriteLine($"[ExerciseService] –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–ø—Ä–∞–≤–∏ {exerciseId}");
        }
    }
}



using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace SpeechAIService;

class SpeechAIService
{
    static async Task Main(string[] args)
    {
        var factory = new ConnectionFactory() { HostName = "localhost" };
        await using var connection = await factory.CreateConnectionAsync();
        await using var channel = await connection.CreateChannelAsync();

        // –ß–µ—Ä–≥–∞ –¥–ª—è –ø—Ä–∏–π–æ–º—É –∞—É–¥—ñ–æ
        await channel.QueueDeclareAsync(
            queue: "exercise.audio",
            durable: false,
            exclusive: false,
            autoDelete: false,
            arguments: null);

        // –ß–µ—Ä–≥–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        await channel.QueueDeclareAsync(
            queue: "speech.result",
            durable: false,
            exclusive: false,
            autoDelete: false,
            arguments: null);

        Console.WriteLine("[SpeechAIService] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É 'exercise.audio'...");

        var consumer = new AsyncEventingBasicConsumer(channel);

        // ‚öôÔ∏è –ù–û–í–ê –°–ò–ì–ù–ê–¢–£–†–ê: –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Äî sender, eventArgs
        consumer.ReceivedAsync += async (sender, ea) =>
        {
            try
            {
                var json = Encoding.UTF8.GetString(ea.Body.ToArray());
                var message = JsonSerializer.Deserialize<JsonElement>(json);

                var exerciseId = message.GetProperty("ExerciseId").GetString();
                Console.WriteLine($"\nüéß –û—Ç—Ä–∏–º–∞–Ω–æ –≤–ø—Ä–∞–≤—É #{exerciseId}");
                Console.WriteLine("‚Üí –ê–Ω–∞–ª—ñ–∑ –≤–∏–º–æ–≤–∏ (—ñ–º—ñ—Ç–∞—Ü—ñ—è 2 —Å–µ–∫)...");

                await Task.Delay(2000); // —ñ–º—ñ—Ç–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É

                var result = new
                {
                    ExerciseId = exerciseId,
                    Accuracy = 0.91,
                    Feedback = "–í–∏–º–æ–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞, –∞—Ä—Ç–∏–∫—É–ª—è—Ü—ñ—è –≥–∞—Ä–Ω–∞!",
                    Timestamp = DateTime.UtcNow
                };

                var body = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(result));
                var props = new BasicProperties();

                await channel.BasicPublishAsync<BasicProperties>(
                    exchange: "",
                    routingKey: "speech.result",
                    mandatory: false,
                    basicProperties: props,
                    body: body);

                Console.WriteLine($"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–ø—Ä–∞–≤–∏ #{exerciseId} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É 'speech.result'");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {ex.Message}");
            }
        };

        await channel.BasicConsumeAsync(
            queue: "exercise.audio",
            autoAck: true,
            consumer: consumer);

        Console.WriteLine("–ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...");
        Console.ReadLine();
    }
}
